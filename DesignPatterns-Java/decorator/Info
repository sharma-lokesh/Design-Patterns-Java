Credits: https://dzone.com/articles/design-patterns-decorator

The concept of a decorator is that it adds additional attributes to an object dynamically. 
A real world example of this would be a picture frame. The picture is our object, which has it's own characteristics.
For display purposes we add a frame to the picture, in order to decorate it. You're probably already familiar with the concept of wrapper objects, 
and in essence, that is what a Decorator is.

The original Gang of Four book on DesignPatterns states:
Allows for the dynamic wrapping of objects in order to modify their existing responsibilities and behaviours.

Traditionally, you might consider subclassing to be the best way to approach this - but there will be cases that subclassing isn't possible, or is impractical. 
This leads us to the Open/Closed Principle: classes should be open for extension, but closed for modification. 
This is a good principle to keep in mind, as it keeps your class stable, but leaves it open for extension if someone wants to add behaviour.

Implementation will clear the concept behind this pattern, step below will be of help:

We'll use emails to illustrate the Decorator. 
1. We have an email interface, which has a getContents method.
2. we'll provide a concrete implementation for use.
3. Now we'll create a decorator which will wrap the base email with extra functionality. 
   We'll model this as an abstract class, and maintain a reference to the base email.  
4. Let's say that emails that leave the company internal server need to have a disclaimer added to the end. 
   We can just add in a decorator to handle this
5. And if we wanted to create secure, encrypted messages, we could use another decorator
6. So, if our email sending client detects this message is going outside the company, we can invoke the appropriate decorator before sending


